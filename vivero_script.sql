-- MySQL Script generated by MySQL Workbench
-- dom 15 nov 2020 20:01:57
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb_vivero
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb_vivero
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb_vivero` DEFAULT CHARACTER SET utf8 ;
USE `mydb_vivero` ;

-- -----------------------------------------------------
-- Table `mydb_vivero`.`Vívero`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`Vívero` (
  `ubicación` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `horario_apertura` VARCHAR(45) NOT NULL,
  `horario_cierre` VARCHAR(45) NOT NULL,
  `codigo_vivero` INT NOT NULL,
  PRIMARY KEY (`codigo_vivero`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb_vivero`.`Zona`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`Zona` (
  `Nombre` VARCHAR(55) NOT NULL,
  `Codigo_zona` INT NOT NULL,
  `Vívero_codigo_vivero` INT NOT NULL,
  PRIMARY KEY (`Codigo_zona`),
  -- INDEX `fk_Zona_Vívero1_idx` (`Vívero_codigo_vivero` ASC) VISIBLE,
  CONSTRAINT `fk_Zona_Vívero1`
    FOREIGN KEY (`Vívero_codigo_vivero`)
    REFERENCES `mydb_vivero`.`Vívero` (`codigo_vivero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb_vivero`.`empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`empleado` (
  `DNI` VARCHAR(9) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellidos` VARCHAR(45) NOT NULL,
  `tipo de contrato` VARCHAR(45) NULL,
  `código_SS` INT NOT NULL,
  `fecha_inicio` DATE NULL,
  `fecha_fin` DATE NULL,
  `Zona_Codigo_zona` INT NOT NULL,
  PRIMARY KEY (`DNI`),
  -- INDEX `fk_empleado_Zona1_idx` (`Zona_Codigo_zona` ASC) VISIBLE,
  CONSTRAINT `fk_empleado_Zona1`
    FOREIGN KEY (`Zona_Codigo_zona`)
    REFERENCES `mydb_vivero`.`Zona` (`Codigo_zona`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb_vivero`.`producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`producto` (
  `código_barras` INT NOT NULL,
  `caducidad` VARCHAR(10) NULL,
  `nombre` VARCHAR(45) NULL,
  `precio` FLOAT NULL,
  `tipo` VARCHAR(45) NULL,
  `stock` INT NULL,
  `Zona_Codigo_zona` INT NOT NULL,
  PRIMARY KEY (`código_barras`),
  -- INDEX `fk_producto_Zona1_idx` (`Zona_Codigo_zona` ASC) VISIBLE,
  CONSTRAINT `fk_producto_Zona1`
    FOREIGN KEY (`Zona_Codigo_zona`)
    REFERENCES `mydb_vivero`.`Zona` (`Codigo_zona`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb_vivero`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`cliente` (
  `DNI` VARCHAR(9) NOT NULL,
  `código_fidelización` INT NULL,
  `num_tarjeta` INT NULL,
  `bonificación` FLOAT NULL,
  `gasto_mensual` FLOAT NULL,
  `email` VARCHAR(60) NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`DNI`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb_vivero`.`pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb_vivero`.`pedido` (
  `código` INT NOT NULL,
  `fecha` VARCHAR(10) NULL,
  `importe` INT NULL,
  `producto_código_barras` INT NOT NULL,
  `empleado_DNI` VARCHAR(9) NOT NULL,
  `cliente_DNI` VARCHAR(9) NOT NULL,
  `cantidad` INT NOT NULL,
  PRIMARY KEY (`código`),
  -- INDEX `fk_pedido_producto1_idx` (`producto_código_barras` ASC) VISIBLE,
  -- INDEX `fk_pedido_empleado1_idx` (`empleado_DNI` ASC) VISIBLE,
  -- INDEX `fk_pedido_cliente1_idx` (`cliente_DNI` ASC) VISIBLE,
  CONSTRAINT `fk_pedido_producto1`
    FOREIGN KEY (`producto_código_barras`)
    REFERENCES `mydb_vivero`.`producto` (`código_barras`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_empleado1`
    FOREIGN KEY (`empleado_DNI`)
    REFERENCES `mydb_vivero`.`empleado` (`DNI`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_cliente1`
    FOREIGN KEY (`cliente_DNI`)
    REFERENCES `mydb_vivero`.`cliente` (`DNI`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb_vivero` ;

-- -----------------------------------------------------
-- procedure crear_email
-- -----------------------------------------------------

DELIMITER $$
USE `mydb_vivero`$$
CREATE PROCEDURE `crear_email` (IN dominio varchar(25), IN nombre varchar(55), OUT email varchar(60))
BEGIN
	set email :=concat(nombre,'@', dominio);
END$$

DELIMITER ;
USE `mydb_vivero`;

DELIMITER $$
USE `mydb_vivero`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb_vivero`.`trigger_crear_email_before_insert` BEFORE INSERT ON `cliente` FOR EACH ROW
BEGIN
	IF NEW.email is NULL THEN 
    call crear_email('viveros.es', NEW.nombre, @email_aux);
    SET NEW.email = @email_aux;
	END IF;
END$$


DELIMITER ;

DELIMITER $$
USE `mydb_vivero`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb_vivero`.`trigger_actualizar_stock_after_insert` AFTER INSERT ON `pedido` FOR EACH ROW
BEGIN
  SELECT stock INTO @stock FROM producto WHERE NEW.producto_código_barras = código_barras;
  SELECT cantidad INTO @cantidad FROM pedido WHERE NEW.producto_código_barras = producto_código_barras;
  UPDATE producto SET stock = @stock - @cantidad WHERE NEW.producto_código_barras = código_barras;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
